name: Cherry-pick a pull request

on:
  workflow_dispatch:
    inputs:
      PULL_REQUEST_NUMBER:
        description: The number of a pull request to CP
        required: true
      NEW_VERSION:
        description: The new app version
        required: false
        default: ''

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      IS_DEPLOYER: ${{ fromJSON(steps.isUserDeployer.outputs.isTeamMember) || github.actor == 'OSBotify' }}
    steps:
      - id: isUserDeployer
        uses: tspascoal/get-user-teams-membership@baf2e6adf4c3b897bd65a7e3184305c165aec872
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          username: ${{ github.actor }}
          team: mobile-deployers

  createNewVersion:
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.IS_DEPLOYER) && github.event.inputs.NEW_VERSION == '' }}
    uses: Expensify/App/.github/workflows/createNewVersion.yml@main
    secrets: inherit

  cherryPick:
    needs: [validateActor, createNewVersion]
    if: ${{ always() && fromJSON(needs.validateActor.outputs.IS_DEPLOYER) }}
    runs-on: ubuntu-latest
    steps:
      # Version: 2.3.4
      - name: Checkout staging branch
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: staging
          fetch-depth: 0

      - uses: Expensify/App/.github/actions/composite/setupGitForOSBotify@main
        with:
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Get merge commit for CP pull request
        id: getCPMergeCommit
        uses: Expensify/App/.github/actions/javascript/getPullRequestDetails@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.actor }}
          PULL_REQUEST_NUMBER: ${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Save correct NEW_VERSION to env
        env:
          NEW_VERSION: ${{ github.event.inputs.NEW_VERSION }}
        run: |
          if [ -z "$NEW_VERSION" ]; then
            echo "NEW_VERSION=${{ needs.createNewVersion.outputs.NEW_VERSION }}" >> "$GITHUB_ENV"
            echo "New version is ${{ env.NEW_VERSION }}"
          else
            echo "NEW_VERSION=${{ github.event.inputs.NEW_VERSION }}" >> "$GITHUB_ENV"
            echo "New version is ${{ env.NEW_VERSION }}"
          fi;

      - name: Get merge commit for version-bump pull request
        id: getVersionBumpMergeCommit
        uses: Expensify/App/.github/actions/javascript/getPullRequestDetails@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: OSBotify
          TITLE_REGEX: Update version to ${{ env.NEW_VERSION }}

      - name: Create branch for new pull request
        run: |
          SOURCE_MERGE_BASE=$(git merge-base staging ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }})
          VERSION_BUMP_MERGE_BASE=$(git merge-base staging ${{ steps.getVersionBumpMergeCommit.outputs.MERGE_COMMIT_SHA }})
          CP_MERGE_BASE=$(git merge-base "$SOURCE_MERGE_BASE" "$VERSION_BUMP_MERGE_BASE")
          git checkout -b ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }} "$CP_MERGE_BASE"
          git push --set-upstream origin ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Cherry-pick the version-bump to new branch
        run: git cherry-pick -S -x --mainline 1 -Xtheirs ${{ steps.getVersionBumpMergeCommit.outputs.MERGE_COMMIT_SHA }}

      - name: Cherry-pick the merge commit of target PR to the new branch
        run: git cherry-pick -S -x --mainline 1 ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}

      - name: Push changes to CP branch
        run: git push

      - name: Create main pull request
        id: createMainPullRequest
        run: |
          gh pr create \
            --title "üçí Cherry pick PR #${{ github.event.inputs.PULL_REQUEST_NUMBER }} to main üçí" \
            --body "This pull request is needed so that this cherry-pick becomes a common ancestor for both main and staging. More details in https://github.com/Expensify/App/pull/10316" \
            --label "automerge" \
            --base "main"
          sleep 5
          echo "::set-output name=PR_NUMBER::$(gh pr view --json 'number' --jq '.number')"
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Create staging pull request
        id: createStagingPullRequest
        run: |
          gh pr create \
            --title "üçí Cherry pick PR #${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging üçí" \
            --body "üçí Cherry pick https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging üçí" \
            --label "automerge" \
            --base "staging"
          sleep 5
          echo "::set-output name=PR_NUMBER::$(gh pr view --json 'number' --jq '.number')"
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Check if main pull request is mergeable
        id: isMainPullRequestMergeable
        uses: Expensify/App/.github/actions/javascript/isPullRequestMergeable@main
        with:
          GITHUB_TOKEN: ${{ github.token }}
          PULL_REQUEST_NUMBER: ${{ steps.createMainPullRequest.outputs.PR_NUMBER }}

      - name: Check if staging pull request is mergeable
        id: isStagingPullRequestMergeable
        uses: Expensify/App/.github/actions/javascript/isPullRequestMergeable@main
        with:
          GITHUB_TOKEN: ${{ github.token }}
          PULL_REQUEST_NUMBER: ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }}

      - name: Check if ShortVersionString is up to date
        id: isShortVersionStringUpdated
        uses: Expensify/App/.github/actions/javascript/checkBundleVersionStringMatch@main

      - name: Check if the PRs can be auto-merged
        id: checkForAutomerge
        run: echo "::set-output name=SHOULD_AUTOMERGE::${{ fromJSON(steps.isMainPullRequestMergeable.outputs.IS_MERGEABLE) && fromJSON(steps.isStagingPullRequestMergeable.outputs.IS_MERGEABLE) && fromJSON(steps.isShortVersionStringUpdated.outputs.BUNDLE_VERSIONS_MATCH) }}"

      - name: Auto-assign PRs if either is not mergeable or if the bundle versions are mismatched
        if: ${{ !fromJSON(steps.checkForAutomerge.outputs.IS_MERGEABLE) }}
        run: |
          gh pr edit ${{ steps.createMainPullRequest.outputs.PR_NUMBER }} --add-label "Engineering,Hourly"
          gh pr edit ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }} --add-label "Engineering,Hourly"
          gh pr edit ${{ steps.createMainPullRequest.outputs.PR_NUMBER }} --add-assignee ${{ steps.getCPMergeCommit.outputs.MERGE_ACTOR }}
          gh pr edit ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }} --add-assignee ${{ steps.getCPMergeCommit.outputs.MERGE_ACTOR }}
          gh pr comment ${{ steps.createMainPullRequest.outputs.PR_NUMBER }} --body \
            "This pull request has an [associated mate against the staging branch](#${{ steps.createStagingPullRequest.outputs.PR_NUMBER }}) which had conflicts and could not be automatically merged. :disappointed:
             Please manually resolve the conflicts, push your changes, and then request another reviewer to review and merge. _Only after doing that_, merge this PR."
          gh pr comment ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }} --body \
            "This pull request has merge conflicts and can not be automatically merged. :disappointed:
             Please manually resolve the conflicts, push your changes, and then request another reviewer to review and merge."
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: If PR has a bundle version mismatch, comment with the instructions for assignee
        if: ${{ !fromJSON(steps.isShortVersionStringUpdated.outputs.BUNDLE_VERSIONS_MATCH) }}
        run: |
          gh pr comment ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }} --body \
            "The CFBundleShortVersionString value in this PR is not compatible with the CFBundleVersion, so cherry picking it will result in an iOS deploy failure.
             Please manually resolve the mismatch, push your changes, and then request another reviewer to review and merge.
             **Important:** This mismatch can be caused by a failed Update Protected Branch workflow followed by a manual CP, but please confirm the cause of the mismatch before updating any version numbers."
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Auto-approve the PRs
        # Important: only auto-approve if there was no merge conflict!
        if: ${{ fromJSON(steps.checkForAutomerge.outputs.SHOULD_AUTOMERGE) }}
        run: |
          gh pr review ${{ steps.createMainPullRequest.outputs.PR_NUMBER }} --approve
          gh pr review ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }} --approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge the PR
        if: ${{ fromJSON(steps.checkForAutomerge.outputs.SHOULD_AUTOMERGE) }}
        run: |
          gh pr merge ${{ steps.createMainPullRequest.outputs.PR_NUMBER }} --merge --delete-branch
          gh pr merge ${{ steps.createStagingPullRequest.outputs.PR_NUMBER }} --merge --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: 'Announces a CP failure in the #announce Slack room'
        uses: 8398a7/action-slack@v3
        if: ${{ failure() || !fromJSON(steps.checkForAutomerge.outputs.SHOULD_AUTOMERGE) }}
        with:
          status: custom
          custom_payload: |
            {
              channel: '#announce',
              attachments: [{
                color: "#DB4545",
                pretext: `<!subteam^S4TJJ3PSL>`,
                text: `üí• Failed to CP https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging üí•`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
